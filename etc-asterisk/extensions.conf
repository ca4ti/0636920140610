[general]
[globals]

;USERS
UserA_DeskPhone=PJSIP/0000f30A0A01
UserA_SoftPhone=PJSIP/SOFTPHONE_A
UserB_DeskPhone=PJSIP/0000f30B0B02
UserB_SoftPhone=PJSIP/SOFTPHONE_B

;PAGING
MULTICAST=MulticastRTP/linksys/239.0.0.1:1234
;MULTICAST=MulticastRTP/linksys/239.0.0.1:1234/239.0.0.1:6061 ; if you have SPA phones
BOGEN=PJSIP/ATAforPaging  ; Assumes an ATA named [ATAforPaging]
PAGELIST=${MULTICAST}&${BOGEN} ; Variable names are arbitrary. 

;OPERATOR
Operator=PJSIP/0000f30A0A01&PJSIP/SOFTPHONE_A&PJSIP/SOFTPHONE_B

[OLD_sets]
exten => 100,1,Dial(${UserA_DeskPhone})

exten => 101,1,Dial(${UserA_SoftPhone})

exten => 102,1,Dial(${UserB_DeskPhone},10)
  same => n,Voicemail(${EXTEN}@default,u))
  same => n,Hangup()

exten => 103,1,Dial(${UserB_SoftPhone})

; These are for testing individually before we put them together
exten => 104,1,Dial(Local/receptionist@localDialDelay)
exten => 105,1,Dial(Local/team_one@localDialDelay)
exten => 106,1,Dial(Local/team_two@localDialDelay)
exten => 107,1,Dial(Local/owner@localDialDelay)

;We're going to assign some variables in order to
;keep the dial string easier to read
exten => 108,1,Noop(DialDelay)
  same => n,Set(Recpn=Local/receptionist@localDialDelay)
  same => n,Set(Team1=Local/team_one@localDialDelay)
  same => n,Set(Team2=Local/team_two@localDialDelay)
  same => n,Set(Boss=Local/owner@localDialDelay)
  same => n,Dial(${Recpn}&${Team1}&${Team2}&${Boss},600)


[sets]
;subDialUser args:
; - ARG1 Channel(s) to dial
; - ARG2 Mailbox
; - ARG3 Mailbox Context
; - ARG4 Timeout
exten => 100,1,Gosub(subDialUser,${EXTEN},1(${UserA_DeskPhone},${EXTEN},default,22))
exten => 101,1,Gosub(subDialUser,${EXTEN},1(${UserA_SoftPhone},${EXTEN},default,23))
exten => 102,1,Gosub(subDialUser,${EXTEN},1(${UserB_DeskPhone},${EXTEN},default,26))
exten => 103,1,Gosub(subDialUser,${EXTEN},1(${UserB_SoftPhone},${EXTEN},default,24))

exten => 110,1,Dial(${UserA_DeskPhone}&${UserA_SoftPhone}&${UserB_SoftPhone})

exten => 200,1,Answer()
     same => n,Playback(hello-world)
     same => n,Hangup()

exten => 201,1,Goto(TestMenu,start,1) ; add this to the end of the 
                                      ; [sets] context

exten => 203,1,Noop(say some digits)
  same => n,Answer()
  same => n,Set(SomeDigits=123)
  same => n,SayDigits(${SomeDigits})
  same => n,Wait(.25)
  same => n,Set(SomeDigits=543)
  same => n,SayDigits(${SomeDigits})

exten => 204,1,Answer()
  same => n,Answer()
  same => n,Set(ONETWO=12)
  same => n,Set(THREEFOUR=34)
  same => n,SayDigits(${ONETWO}${THREEFOUR})   ; easy peasy
  same => n,Wait(0.2)
  same => n,Set(NOTFIVE=${THREEFOUR}${ONETWO}) ; peasy easy
  same => n,SayNumber(${NOTFIVE})              ; see what we did here?
  same => n,Wait(0.2)
  same => n,SayDigits(2${ONETWO}3)             ; you can concatenate literals and variables

exten => 205,1,Answer()
  same => n,SayDigits(123)
  same => n,SayNumber(123)
  same => n,SayNumber(${LEN(123)})

exten => 206,1,Answer()
  same => n,Set(TIMEOUT(response)=1)
  same => n,Background(enter-ext-of-person)
  same => n,WaitExten()       ; TIMEOUT() has set this to 1
  same => n,Playback(like_to_tell_valid_ext)
  same => n,Set(TIMEOUT(response)=5)
  same => n,Background(enter-ext-of-person)
  same => n,WaitExten()       ; Should be 5 seconds now
  same => n,Playback(like_to_tell_valid_ext)
  same => n,Hangup()

exten => 207,1,Answer()
  same => n,Set(TIMEOUT(response)=1)
  same => n,SayNumber(${TIMEOUT(response)})
  same => n,Set(TIMEOUT(response)=5)
  same => n,SayNumber(${TIMEOUT(response)})
  same => n,Hangup()

exten => 209,1,Noop(Test use of conditional branching to labels)
  same => n,GotoIf($[ ${RAND(0,1)} = 1 ]?weasels:iguanas)
; same => n,GotoIf(${RAND(0,1)}?weasels:iguanas) ; this works too but it won't in every situation

  same => n(weasels),Playback(weasels-eaten-phonesys) ; NOTE THIS IS SAME EXTENSION
  same => n,Hangup()

  same => n(iguanas),Playback(office-iguanas) ; STILL THE SAME EXTENSION
  same => n,Hangup()

exten  => 210,1,Noop(Test use of conditional branching to extensions)
  same => n,GotoIf($[ ${RAND(0,1)} = 1 ]?weasels,1:iguanas,1)

exten => weasels,1,Playback(weasels-eaten-phonesys) ; DIFFERENT EXTENSION
  same => n,Hangup()

exten => iguanas,1,Playback(office-iguanas) ; STILL THE SAME EXTENSION
  same => n,Hangup()

exten => 211,1,NoOp()
    same => n,Answer()
    same => n,Set(COUNT=5)

    same => n(start),GotoIf($[ ${COUNT} > 0 ]?:goodbye)
    same => n,SayNumber(${COUNT})
    same => n,Set(COUNT=$[ ${COUNT} - 1 ])
    same => n,Goto(start)

    same => n(goodbye),Playback(vm-goodbye)
    same => n,Hangup()

exten => 214,1,NoOp(CALLERID(num) is ${CALLERID(num)} and CALLERID(name) is ${CALLERID(name)})
  same => n,GotoIf($[ ${CALLERID(num)} = 8885551212 ]?reject:allow)

  same => n(allow),Dial(${UserA_DeskPhone})
  same => n,Hangup()

  same => n(reject),Playback(abandon-all-hope)
  same => n,Hangup()

exten => 216,1,NoOp()
  same => n,Set(DB(testkey/count)=1)

exten => 217,1,NoOp()
  same => n,Set(THE_ANSWER=${DB(somekey/somevalue)})
  same => n,Answer()
  same => n,SayNumber(${THE_ANSWER})

; deletes the key and returns its value in one step
exten => 218,1,Verbose(0, We just blew away ${DB_DELETE(somekey/somevalue)})

exten => 219,1,DBdeltree(somekey)

exten => 220,1,NoOp()
  same => n,Set(COUNT=${DB(test/count)})         ; retrieve current value in database
  same => n,GotoIf($[${ISNULL(${COUNT})}]?firstcount:saycount) ; is there a value?

  same => n(firstcount),Set(DB(test/count)=1)    ; set the value to 1
  same => n,Goto(saycount)

  same => n(saycount),NoOp() 
  same => n,Answer
  same => n,SayNumber(${COUNT})
  same => n,Goto(increment)                       ; not reqd but a good habit

  same => n(increment),Set(COUNT=$[${COUNT} + 1]) ; increment by one
  same => n,Set(DB(test/count)=${COUNT})          ; and assign new value to database
  same => n,Goto(saycount)                        ; loop back and say it again

exten => 221,1,NoOp()
    same => n,ConfBridge(${EXTEN})

exten => 222,1,Noop(CALLERID function)
  same => n,Noop(CALLERID currently ${CALLERID(all)})
  same => n,Set(CALLERID(num)=4169671111)
  same => n,Noop(CALLERID now ${CALLERID(all)})
  same => n,Set(CALLERID(name)="Somename")
  same => n,Noop(CALLERID now ${CALLERID(all)})
  same => n,Hangup()

exten => 223,1,Noop(CHANNEL function)
  same => n,Answer()
  same => n,Noop(CHANNEL(name) is ${CHANNEL(name)})
  same => n,Noop(CHANNEL(musicclass) is ${CHANNEL(musicclass)})
  same => n,Noop(CHANNEL(rtcp,all_jitter) is ${CHANNEL(rtcp,all_jitter)})
  same => n,Noop(CHANNEL(rtcp,all_loss) is ${CHANNEL(rtcp,all_loss)})
  same => n,Noop(CHANNEL(rtcp,all_rtt) is ${CHANNEL(rtcp,all_rtt)})
  same => n,Noop(CHANNEL(rtcp,txcount) is ${CHANNEL(rtcp,txcount)})
  same => n,Noop(CHANNEL(rtcp,rxcount) is ${CHANNEL(rtcp,rxcount)})
  same => n,Noop(CHANNEL(pjsip,local_uri) is ${CHANNEL(pjsip,local_uri)})
  same => n,Noop(CHANNEL(pjsip,remote_uri) is ${CHANNEL(pjsip,remote_uri)})
  same => n,Noop(CHANNEL(pjsip,request_uri) is ${CHANNEL(pjsip,request_uri)})
  same => n,Noop(CHANNEL(pjsip,local_tag) is ${CHANNEL(pjsip,local_tag)})

exten => 224,1,Noop(CURL function)
  same => n,Set(ExternalIP=${CURL(http://whatismyip.akamai.com)})
  same => n,Noop(The external IP address is ${ExternalIP})

exten => 225,1,Noop(CUT function)
  same => n,Set(ExternalIP=${CURL(http://whatismyip.akamai.com)})
  same => n,Noop(The external IP address is ${ExternalIP})
  same => n,Answer()
  same => n,SayDigits(=${CUT(ExternalIP,.,1)})
  same => n,Playback(letters/dot)
  same => n,SayDigits(=${CUT(ExternalIP,.,2)})
  same => n,Playback(letters/dot)
  same => n,SayDigits(=${CUT(ExternalIP,.,3)})
  same => n,Playback(letters/dot)
  same => n,SayDigits(=${CUT(ExternalIP,.,4)})

exten => 226,1,Noop(IF)
  same => n,Answer()
  same => n,Playback(${IF($[$[${STRFTIME(,,%S)} % 2] = 1]?hear-odd-noise:good-evening)})

exten => 227,1,Noop(IF)
  same => n,Answer()
  same => n,Wait(.5)
                 same => n,Noop(${STRFTIME(,,%S)})                        ; current time - just seconds
              same => n,Noop($[ ${STRFTIME(,,%S)} % 2 ])                  ; divide by two and return remainder
      same => n,Noop(${IF($[ $[ ${STRFTIME(,,%S)} % 2 ] = 1 ]?odd:even)}) ; if 1, then odd, otherwise even 
  same => n,Playback(${IF($[ $[ ${STRFTIME(,,%S)} % 2 ] = 1 ]?hear-odd-noise:good-evening)}) ; odd? even? get it?

exten => 228,1,Noop(IF)
  same => n,Answer()
  same => n,Wait(.5)
  same => n,Noop(${STRFTIME(,,%S)})
  same => n,Noop($[${STRFTIME(,,%S)} % 2])
  same => n,Noop(${IF($[$[${STRFTIME(,,%S)} % 2 ] = 1]?odd:even)})
  same => n,Playback(${IF($[$[${STRFTIME(,,%S)} % 2 ] = 1]?hear-odd-noise:good-evening)})

exten => 229,1,Noop(LEN)
  same => n,Set(LengthyString=${RAND(1,2000)})
  same => n,Noop(${LEN(${LengthyString})})
  same => n,Noop(${IF( $[ ${LEN(${LengthyString})} <= 3 ]?tooshort:youcanride)})

exten => 230,1,Noop(STRFTIME)
  same => n,Noop(${STRFTIME(,,%S)}) ; we've seen this before
  same => n,Noop(${STRFTIME(,,%B)}) ; month
  same => n,Noop(${STRFTIME(,,%H)}) ; hour in 24hr format
  same => n,Noop(${STRFTIME(,,%m)}) ; month as a decimal
  same => n,Noop(${STRFTIME(,,%M)}) ; minute
  same => n,Noop(${STRFTIME(,,%Y)}) ; year - 4 digits
  same => n,Noop(${STRFTIME(,,%Y-%m-%d %H:%m:%S)}) ; string some together

exten => 231,1,NoOp()
    same => n,Set(__DYNAMIC_FEATURES=agi_test)
    same => n,ConfBridge(${EXTEN})

exten => 232,1,Noop(Current DTMF for parkcall: ${FEATUREMAP(parkcall)})

exten => 233,1,NoOp()
    same => n,Set(FEATUREMAP(parkcall)=*9)
    same => n,Noop(DTMF for parkcall now: ${FEATUREMAP(parkcall)})

exten => 234,1,NoOp()
    same => n,Set(FEATURE(parkingtime)=60)

exten => 237,1,Noop()
  same => n,AGI(hello-world.sh)

exten => 241,1,AGI(account-lookup.py)
  same => n,Hangup()

exten => 242,1,Noop()
  same => n,Stasis(zarniwoop)
  same => n,Hangup()

exten => 321,1,NoOp()
    same => n,Answer()
    same => n,Set(COUNT=3)
    same => n,Set(NEWCOUNT=$[${COUNT} + 1])
    same => n,SayNumber(${NEWCOUNT})

exten => _4XX,1,Noop(User Dialed ${EXTEN})
  same => n,Answer()
  same => n,SayDigits(${EXTEN})
  same => n,Hangup()

exten => 500,1,GoSub(subRecordPrompt,${EXTEN},1(daygreeting))
exten => 501,1,GoSub(subRecordPrompt,${EXTEN},1(nightgreeting))
exten => 502,1,GoSub(subRecordPrompt,${EXTEN},1(mainmenu))
exten => 503,1,GoSub(subRecordPrompt,${EXTEN},1(holdwhileweconnect))
exten => 504,1,GoSub(subRecordPrompt,${EXTEN},1(faxandaddress))
exten => 505,1,GoSub(subRecordPrompt,${EXTEN},1(transfertoreception))
exten => 506,1,GoSub(subRecordPrompt,${EXTEN},1(invalid))
exten => 507,1,GoSub(subRecordPrompt,${EXTEN},1(holdwhileweconnect))

exten => 510,1,GoSub(subRecordPrompt,${EXTEN},1(prompt-tolisten) ; press 1
exten => 511,1,GoSub(subRecordPrompt,${EXTEN},1(prompt-torecord) ; press 2
exten => 512,1,GoSub(subRecordPrompt,${EXTEN},1(prompt-instructions) ; input 3-digit promptid
exten => 513,1,GoSub(subRecordPrompt,${EXTEN},1(prompt-waitforbeep) ; wait for beep
exten => 514,1,GoSub(subRecordPrompt,${EXTEN},1(prompt-1tolisten-2tosave-3todiscard) 
exten => 515,1,GoSub(subRecordPrompt,${EXTEN},1(prompt-saved)
;exten => 516,1,GoSub(subRecordPrompt,${EXTEN},1(


exten => _555XXXX,1,Answer()
  same => n,SayDigits(${EXTEN})
exten => _55512XX,1,Answer()
  same => n,Playback(tt-monkeys)

; ConfBridge 
exten => *600,1,GoSub(subConference,${EXTEN:1},1(participant))   ;
exten => *601,1,GoSub(subConference,${EXTEN:1},1(admin,4242))    ;

; Queue
exten => 610,1,Noop()
  same => n,Progress()
  same => n,Queue(sales,120)
  same => n,Voicemail(${EXTEN}@queues,u)
  same => n,Hangup()

exten => 611,1,Noop()
  same => n,Progress()
  same => n,Queue(support,120)
  same => n,Voicemail(${EXTEN}@queues,u)
  same => n,Hangup()

exten => 612,1,Noop()
  same => n,Progress()
  same => n,Queue(support-priority,120)
  same => n,Voicemail(${EXTEN}@queues,u)
  same => n,Hangup()

exten => 613,1,Noop()
  same => n,Goto(MainMenu,s,1)
  same => n,Hangup()

exten => *724,1,Noop(Page)
  same => n,Set(ChannelsToPage=${UserA_DeskPhone}&${UserA_SoftPhone}&${UserB_DeskPhone}&${UserB_SoftPhone})
  same => n,Page(${ChannelsToPage},i,120)

;For Mitel (FKA Aastra):
exten => *726,1,Verbose(2,Paging to Aastra sets)
    same => n,SIPAddHeader(Alert-Info: info=alert-autoanswer)
    same => n,Set(PageDevice=PJSIP/00085D000000)
    same => n,Page(${PageDevice},i)

;For Polycom:
exten => *727,1,Verbose(2,Paging to Polycom sets)
    same => n,SIPAddHeader(Alert-Info: Ring Answer)
    same => n,Set(PageDevice=PJSIP/0004F2000000)
    same => n,Page(${PageDevice},i)

;For Snom:
exten => *728,1,Verbose(2,Paging to Snom sets)
    same => n,Set(VXML_URL=intercom=true)
; replace 'domain.com' with the domain of your system
    same => n,SIPAddHeader(Call-Info: sip:domain.com\;answer-after=0)
    same => n,Set(PageDevice=PJSIP/000413000000)
    same => n,Page(${PageDevice},i)

;For Cisco SPA (the former Linksys phones, not the 79XX series):
exten => *729,1,Verbose(2,Paging to Cisco SPA sets, but not Cisco 79XX sets)
    same => n,SIPAddHeader(Call-Info:\;answer-after=0)    ; Cisco SPA phones
    same => n,Set(PageDevice=PJSIP/0004F2000000)
    same => n,Page(${PageDevice},i)

exten => *730,1,Page(MulticastRTP/basic/239.0.0.1:1234)

exten => *731,1,Page(${PAGELIST},i,120)

exten => *732,1,Verbose(2,Logging In Queue Member)
;same => n,DumpChan()
;same => n,Noop(${CHANNEL(endpoint)})
;same => n,Hangup()
   same => n,Set(MemberChannel=${CHANNEL(channeltype)}/${CHANNEL(endpoint)})
   same => n,AddQueueMember(support,${MemberChannel})
   same => n,Verbose(1,${AQMSTATUS}) ; ADDED, MEMBERALREADY, NOSUCHQUEUE
   same => n,Playback(agent-loginok)
   same => n,Hangup()

exten => *733,1,Verbose(2,Logging Out Queue Member)
   same => n,Set(MemberChannel=${CHANNEL(channeltype)}/${CHANNEL(endpoint)})
   same => n,RemoveQueueMember(support,${MemberChannel})
   same => n,Verbose(1,${RQMSTATUS}) ; REMOVED, NOTINQUEUE, NOSUCHQUEUE
   same => n,Playback(agent-loggedoff)
   same => n,Hangup()

exten => *734,1,Verbose(2,Pause Queue Member)
   same => n,Set(MemberChannel=${CHANNEL(channeltype)}/${CHANNEL(endpoint)})
   same => n,PauseQueueMember(support,${MemberChannel})
   same => n,Verbose(1,${PQMSTATUS}) ; PAUSED, NOTFOUND
   same => n,Playback(dictate/paused)
   same => n,Hangup()

exten => *735,1,Verbose(2,Unpause Queue Member)
   same => n,Set(MemberChannel=${CHANNEL(channeltype)}/${CHANNEL(endpoint)})
   same => n,UnpauseQueueMember(support,${MemberChannel})
   same => n,Verbose(1,${UPQMSTATUS}) ; UNPAUSED, NOTFOUND
   same => n,Playback(available)
   same => n,Hangup()

; Logging into multiple queues via the AstDB system
exten => *736,1,Verbose(2,Logging into multiple queues per the database values)
; get the available queues for this channel
   same => n,GoSub(subSetupAvailableQueues,start,1())  
   same => n,Set(QueueCounter=1)  ; setup a counter variable
; using CUT(), get the first listed queue returned from the AstDB
; Note that we've used '^' as our delimiter
   same => n,Set(WorkingQueue=${CUT(AvailableQueues,^,${QueueCounter})})
   same => n,Set(WorkingPenalty=${CUT(MemberPenalties,^,${QueueCounter})})
; While the WorkingQueue channel variable contains a value, loop
   same => n,While($[${EXISTS(${WorkingQueue})}])
; AddQueueMember(queuename[,interface[,penalty[,options[,membername
;  [,stateinterface]]]]])
; Add the channel to a queue, setting the interface for calling 
; and the interface for monitoring of device state
; *** This should all be on a single line
     same => n,AddQueueMember(${WorkingQueue},${MemberChanType}/${MemberChannel},${WorkingPenalty},,${MemberChanType}/${MemberChannel})
     same => n,Set(QueueCounter=$[${QueueCounter} + 1])    ; increase our counter
; get the next available queue; if it is null our loop will end
     same => n,Set(WorkingQueue=${CUT(AvailableQueues,^,${QueueCounter})})
     same => n,Set(WorkingPenalty=${CUT(MemberPenalties,^,${QueueCounter})})
     same => n,EndWhile()
; let the agent know they were logged in okay
   same => n,Playback(silence/1&agent-loginok)
   same => n,Hangup()

exten => no_queues_available,1,Verbose(2,No queues available for ${MemberChannel})
   same => n,Playback(silence/1&channel&not-yet-assigned)
   same => n,Hangup()

; Used for logging agents out of all configured queues per the AstDB
exten => *737,1,Verbose(2,Logging out of multiple queues)
; Because we reused some code, we've placed the duplicate code into a subroutine
   same => n,GoSub(subSetupAvailableQueues,start,1())   
   same => n,Set(QueueCounter=1)
   same => n,Set(WorkingQueue=${CUT(AvailableQueues,^,${QueueCounter})})
   same => n,While($[${EXISTS(${WorkingQueue})}])
   same => n,RemoveQueueMember(${WorkingQueue},${MemberChanType}/${MemberChannel})
   same => n,Set(QueueCounter=$[${QueueCounter} + 1])
   same => n,Set(WorkingQueue=${CUT(AvailableQueues,^,${QueueCounter})})
   same => n,EndWhile()
   same => n,Playback(silence/1&agent-loggedoff)
   same => n,Hangup()

; Used for pausing agents in all available queues
exten => *738,1,Verbose(2,Pausing member in all queues)
   same => n,GoSub(subSetupAvailableQueues,start,1())
   ; if we don't define a queue, the member is paused in all queues
   same => n,PauseQueueMember(,${MemberChanType}/${MemberChannel})
   same => n,GotoIf($[${PQMSTATUS} = PAUSED]?agent_paused,1:agent_not_found,1)

exten => agent_paused,1,Verbose(2,Agent paused successfully)
   same => n,Playback(dictate/paused)
   same => n,Hangup()

; Used for unpausing agents in all available queues
exten => *739,1,Verbose(2,UnPausing member in all queues)
   same => n,GoSub(subSetupAvailableQueues,start,1())
   ; if we don't define a queue, then the member is unpaused from all queues
   same => n,UnPauseQueueMember(,${MemberChanType}/${MemberChannel})
   same => n,GotoIf($[${UPQMSTATUS} = UNPAUSED]?agent_unpaused,1:agent_not_found,1)

; logging in 
exten => *740,1,Noop(Logging in device ${CHANNEL(endpoint)} into the support queue)
   same => n,Set(MemberTech=${CHANNEL(channeltype)})
   same => n,Set(MemberIdent=${CHANNEL(endpoint)})
   same => n,Set(Interface=${MemberTech}/${MemberIdent})
   same => n,AddQueueMember(support,Local/${MemberTech}-${MemberIdent}@localMemberConnector,,,${IF($[${MemberTech} = PJSIP]?${Interface})})
   same => n,AddQueueMember(support-priority,Local/${MemberTech}-${MemberIdent}@localMemberConnector,,,${IF($[${MemberTech} = PJSIP]?${Interface})})
   same => n,AddQueueMember(sales,Local/${MemberTech}-${MemberIdent}@localMemberConnector,,,${IF($[${MemberTech} = PJSIP]?${Interface})})
   same => n,Playback(silence/1)
   same => n,Playback(${IF($[${AQMSTATUS} = ADDED]?agent-loginok:agent-incorrect)})
   same => n,Hangup()

exten => agent_unpaused,1,Verbose(2,Agent paused successfully)
   same => n,Playback(silence/1&available)
   same => n,Hangup()

; Used by both pausing and unpausing dialplan functionality
exten => agent_not_found,1,Verbose(2,Agent was not found)
   same => n,Playback(silence/1&cannot-complete-as-dialed)

exten => *741,1,Noop(Simple IVR)
    same => n,Answer()
    same => n,Set(MyIPAddressIs=${CURL(https://ipinfo.io/ip)})
    same => n,SayAlpha(${MyIPAddressIs})
    same => n,Hangup()

exten => *742,1,Noop(Prompts)
    same => n,Goto(prompts,s,1)
    same => n,Hangup()

exten => *98,1,NoOp(Access voicemail retrieval.)
   same => n,VoiceMailMain()

[closed]
exten => start,1,Noop(after hours handler)
  same => n,Playback(go-away2)
  same => n,Hangup()


[TestMenu]
exten => start,1,Noop(main autoattendant)
  same => n,GotoIfTime(16:59-08:00,mon-fri,*,*?closed,start,1)
  same => n,GotoIfTime(11:59-09:00,sat,*,*?closed,start,1)
  same => n,GotoIfTime(00:00-23:59,sun,*,*?closed,start,1)
  same => n,Background(enter-ext-of-person)
  same => n,WaitExten(5)

exten => 1,1,Dial(${UserA_DeskPhone},10)
   same => n,Playback(vm-nobodyavail)
   same => n,Hangup()

exten => 2,1,Dial(${UserA_SoftPhone},10)
   same => n,Playback(vm-nobodyavail)
   same => n,Hangup()

exten => 3,1,Dial(${UserB_DeskPhone},10)
   same => n,Playback(vm-nobodyavail)
   same => n,Hangup()

exten => 4,1,Dial(${UserB_SoftPhone},10)
   same => n,Playback(vm-nobodyavail)
   same => n,Hangup()

exten => 8,1,Directory(default,sets,f)
exten => 9,1,Directory(default,sets)

exten => i,1,Playback(pbx-invalid)
   same => n,Goto(TestMenu,start,1)

exten => t,1,Playback(please-try-again)
   same => n,Goto(TestMenu,start,1)

[MainMenu]

exten => s,1,Verbose(1, Caller ${CALLERID(all)} has entered the auto attendant)
    same => n,Answer()

; this sets the inter-digit timer
    same => n,Set(TIMEOUT(digit)=2)

; wait one second to establish audio
    same => n,Wait(1)

; If Mon-Fri 9-5 goto label daygreeting
    same => n,GotoIfTime(9:00-17:00,mon-fri,*,*?daygreeting:afterhoursgreeting)

    same => n(afterhoursgreeting),Background(nightgreeting) ; AFTER HOURS GREETING
    same => n,Goto(menuprompt)

    same => n(daygreeting),Background(daygreeting)   ; DAY GREETING
    same => n,Goto(menuprompt)

    same => n(menuprompt),Background(mainmenu) ; MAIN MENU PROMPT
    same => n,WaitExten(4)                      ; more than 4 seconds is probably
                                                ; too much
    same => n,Goto(0,1)                         ; Treat as if caller has pressed '0'

exten => 1,1,Verbose(1, Caller ${CALLERID(all)} has entered the sales queue)
    same => n,Goto(sets,610,1)     ; Sales Queue - see Chapter 13 for details

exten => 2,1,Verbose(1, Caller ${CALLERID(all)} has entered the service queue)
    same => n,Goto(sets,611,1)     ; Service Queue - see Chapter 13 for details

exten => 3,1,Verbose(1, Caller ${CALLERID(all)} has requested address and fax info)
    same => n,Background(faxandaddress)            ; Address and fax info
    same => n,Goto(s,menuprompt)      ; Take caller back to main menu prompt

exten => #,1,Verbose(1, Caller ${CALLERID(all)} is entering the directory)
    same => n,Directory(default)   ; Send the caller to the directory.
                                   ; Use InternalSets as the dialing context

exten => 0,1,Verbose(1, Caller ${CALLERID(all)} is calling the operator)
    same => n,Goto(sets,611,1)     ; Service Queue - see Chapter 13 for details

exten => i,1,Verbose(1, Caller ${CALLERID(all)} has entered an invalid selection)
    same => n,Playback(invalid)
    same => n,Goto(s,menuprompt)

exten => t,1,Verbose(1, Caller ${CALLERID(all)} has timed out)
    same => n,Goto(0,1)


; You will want to have a pattern match for the various extensions
; that you'll allow external callers to dial
; BUT DON'T JUST INCLUDE THE LocalSets CONTEXT
; OR EXTERNAL CALLERS WILL BE ABLE TO MAKE CALLS OUT OF YOUR SYSTEM

; WHATEVER YOU DO HERE, TEST IT CAREFULLY TO ENSURE EXTERNAL CALLERS
; WILL NOT BE ABLE TO DO ANYTHING BUT DIAL INTERNAL EXTENSIONS

exten => _1XX,1,Verbose(1,Call to an extension starting with '1')
    same => n,Goto(sets,${EXTEN},1)

;FEATURES
[prompts]
exten => s,1,Answer
exten => s,n,Set(step1count=0) ; Initialize counters

; If we get no response after 3 times, we stop asking
   same => n(beginning),GotoIf($[${step1count} > 2]?end)
   same => n,Read(which,prompt-instructions,3)
   same => n,Set(step1count=$[${step1count} + 1])

; All prompts must be 3 digits in length
   same => n,GotoIf($[${LEN(${which})} != 3]?beginning) 
   same => n,Set(step1count=0) ; Successful response; reset counters
   same => n,Set(step2count=0)

   same => n(step2),Set(step2count=$[${step2count} + 1])
   same => n,GotoIf($[${step2count} > 2]?beginning) ; No response after 3 tries

; If the file doesn't exist, then don't ask whether to play it
   same => n,GotoIf($[${STAT(f,/var/lib/asterisk/sounds/${which}.wav)} = 0]?recordonly) 
   same => n,Background(prompt-tolisten)

   same => n(recordonly),Background(prompt-torecord)
   same => n,WaitExten(10) ; Wait 10 seconds for a response
   same => n,Goto(step2)

   same => n(end),Playback(goodbye)
   same => n,Hangup()

exten => 1,1,Set(step2count=0)
   same => n,Background(/var/lib/asterisk/sounds/${which})
   same => n,Goto(s,step2)

exten => 2,1,Set(step2count=0)
   same => n,Playback(prompt-waitforbeep)
   same => n,Record(${CHANNEL(uniqueid)}.wav)

   same => n(listen),Playback(${CHANNEL(uniqueid)})
   same => n,Set(step3count=0)
   same => n,Read(saveornot,prompt-1tolisten-2tosave-3todiscard,1,,2,3)
   same => n,GotoIf($["${saveornot}" = "1"]?listen)
   same => n,GotoIf($["${saveornot}" = "2"]?saveit)
   same => n,GotoIf($["${saveornot}" = "3"]?tossit)
   same => n,Goto(listen)

   same => n(tossit),System(rm -f /var/lib/asterisk/sounds/${CHANNEL(uniqueid)}.wav)
   same => n,Goto(s,beginning)

   same => n(saveit),System(mv -f /var/lib/asterisk/sounds/${CHANNEL(uniqueid)}.wav /var/lib/asterisk/sounds/${which}.wav)
   same => n,Playback(prompt-saved)
   same => n,Goto(s,beginning)


;LOCAL CHANNELS
[localDialDelay]
exten => receptionist,1,Gosub(subDialDelay,${EXTEN},1(${UserA_DeskPhone},0,600))
exten => team_one,1,Gosub(subDialDelay,${EXTEN},1(${UserA_SoftPhone},9,600))
exten => team_two,1,Gosub(subDialDelay,${EXTEN},1(${UserB_DeskPhone},9,600))
exten => owner,1,Gosub(subDialDelay,${EXTEN},1(${UserB_SoftPhone},12,18))

[DISABLEDlocalMemberConnector] 
exten => _[A-Za-z0-9].,1,Verbose(2,Connect ${CALLERID(all)} to Agent at ${EXTEN})
   same => n,Wait(0.1) ; Prevent loop from completely hogging CPU
   ; filter out any bad characters, allow alphanumeric chars and hyphen
   same => n,Set(QueueMember=${FILTER(A-Za-z0-9\-_,${EXTEN})})
   ; assign the first field of QueueMember to Technology; hyphen as separator
   same => n,Set(Technology=${CUT(QueueMember,-,1)})
   ; assign the second field of QueueMember to Device using the hyphen separator
   same => n,Set(Device=${CUT(QueueMember,-,2)})
   ; dial the agent
   same => n,Dial(${Technology}/${Device})
   same => n,Hangup()

[localMemberConnector]
exten => _[A-Za-z0-9].,1,Verbose(2,Connect ${CALLERID(all)} to Agent at ${EXTEN})
   same => n,Wait(0.1) ; Prevent loop from completely hogging CPU
   same => n,Set(QueueMember=${FILTER(A-Za-z0-9\-_,${EXTEN})}) ; allow alphanum, - , _ 
   same => n,Set(Technology=${CUT(QueueMember,-,1)})           ; first field, hyphen is separator
   same => n,Set(Device=${CUT(QueueMember,-,2)})               ; second field, hypen separator
   ; is this our mismatched pair?
   same => n,DumpChan()
   same => n,Noop(${CALLERID(all)} : ${Device})
   same => n,GotoIf($["${CALLERID(num)}" = "103" & "${Device}" = "SOFTPHONE_A"]?rejectcall:ringagent)

   ; dial the agent
   same => n(ringagent),Dial(${Technology}/${Device})
   same => n,Hangup()

   ; send it back!
   same => n(rejectcall),Congestion()
   same => n,Hangup()

; SUBROUTINES
[subDialUser]
exten => _[0-9].,1,Noop(Dial extension ${EXTEN},channel: ${ARG1},  mailbox: ${ARG2}, mboxcontext: ${ARG3}, timeout ${ARG4})
  same => n,Set(__DYNAMIC_FEATURES=agi_test)
  same => n,Dial(${ARG1},${ARG4})
  same => n,GotoIf($["${DIALSTATUS}" = "BUSY"]?busy:unavail)

  same => n(unavail),VoiceMail(${ARG2}@${ARG3},u)
  same => n,Hangup()

  same => n(busy),VoiceMail(${ARG2}@${ARG3},b)
  same => n,Hangup() 

[subDialDelay]
exten => _[a-zA-Z0-9].,1,Noop(Dial channel ${ARG1}, pre-delay ${ARG2}, Dial timeout ${ARG3})
  same => n,Progress()    ; Optional but worth testing if you have problems; Returns a signal to indicate the call is proceeding
  same => n,Wait(${ARG2}) ; how long to wait before dialing
  same => n,Dial(${ARG1},${ARG3}) ; note that ARG2 can be blank, which means no dial timeout (infinite)
  same => n,Hangup()

[subConference]
exten => _[0-9].,1,Noop(Creating conference room for ${EXTEN})
  same => n,Goto(${ARG1})
  same => n,Noop(INVALID ARGUMENT ARG1: ${ARG1})

  same => n(admin),Noop()
  same => n,Authenticate(${ARG2}) ; Could also use ,Set(CONFBRIDGE(user,pin)=${ARG2})
  same => n,Set(ConfNum=$[${EXTEN} - 1])  ; Hack: Subtract 1 to get the conference number (has to be the same room as the participants)
  same => n,Set(CONFBRIDGE(bridge,record_conference)=yes) ; 
  same => n,Set(RecordingFileName=${ConfNum}-${STRFTIME(,,%Y-%m-%d %H:%m:%S)}) ; give it a unique name including the exten
  same => n,Set(CONFBRIDGE(bridge,record_file)=${RecordingFileName})
  same => n,Set(CONFBRIDGE(user,admin)=yes)  ; Admin
  same => n,Set(CONFBRIDGE(user,marked)=yes) ; Mark this user
  same => n,Set(CONFBRIDGE(menu,7)=decrease_talking_volume) ; Decrease gain
  same => n,Set(CONFBRIDGE(menu,9)=increase_talking_volume) ; Increase gain
  same => n,Set(CONFBRIDGE(menu,4)=set_as_single_video_src)        ; Lock video on me
  same => n,Set(CONFBRIDGE(menu,5)=release_as_single_video_src)    ; Return to video of whomever is talking
  same => n,Set(CONFBRIDGE(menu,6)=admin_toggle_mute_participants) ; Mute everyone except admins
  same => n,Set(CONFBRIDGE(menu,2)=participant_count)              ; How many participants?
  same => n,ConfBridge(${ConfNum})

  same => n(participant),Noop()
  same => n,Set(ConfNum=${EXTEN})
  same => n,Set(CONFBRIDGE(user,wait_marked)=yes) ; Wait for a marked user
  same => n,Set(CONFBRIDGE(user,announce_only_user)=no) ; Wait for a marked user
  same => n,Set(CONFBRIDGE(user,music_on_hold_when_empty)=yes) ; Wait for a marked user
  same => n,Set(CONFBRIDGE(menu,7)=decrease_talking_volume) ; Decrease gain
  same => n,Set(CONFBRIDGE(menu,9)=increase_talking_volume) ; Increase gain

  same => n,ConfBridge(${ConfNum})

[subSetupAvailableQueues]
; This subroutine is used by the various login/logout/pausing/unpausing routines
; in our multiple queue login example.
;
exten => start,1,Verbose(2,Checking for available queues)
; Get the current channel's peer name
   same => n,Set(MemberChannel=${CHANNEL(endpoint)})
; Get the current channel's technology type
   same => n,Set(MemberChanType=${CHANNEL(channeltype)})    
; Get the list of queues available for this agent
   same => n,Set(AvailableQueues=${DB(queue_agent/${MemberChannel}/available_queues)})
   same => n,Set(MemberPenalties=${DB(queue_agent/${MemberChannel}/penalty)})
; if there are no queues assigned to this agent we'll handle it in the 
; no_queues_available extension
   same => n,GotoIf($[${ISNULL(${AvailableQueues})}]?no_queues_available,1) 
   same => n,Return()

exten => no_queues_available,1,Verbose(2,No queues available for agent ${MemberChannel})
; playback a message stating the channel has not yet been assigned
   same => n,Playback(silence/1&channel&not-yet-assigned)  
   same => n,Hangup()

[subRecordPrompt]
exten => _[a-zA-Z0-9].,1,Noop(Record prompt name: ${ARG1})
  same => n,Playback(vm-intro)
   same => n,Record(${ARG1}.wav)
   same => n,Wait(2)
   same => n,Playback(${ARG1})
   same => n,Hangup

